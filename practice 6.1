const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const dotenv = require('dotenv');

dotenv.config();
const app = express();
app.use(cors());
app.use(express.json());

const logger = (req, res, next) => {
  const now = new Date().toISOString();
  console.log(`[${now}] ${req.method} ${req.originalUrl}`);
  next();
};

const auth = (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith('Bearer ')) return res.status(401).json({ message: 'Unauthorized: No token provided' });
  const token = authHeader.split(' ')[1];
  if (token !== process.env.API_TOKEN) return res.status(403).json({ message: 'Forbidden: Invalid token' });
  next();
};

const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  age: { type: Number, required: true }
}, { timestamps: true });

const User = mongoose.model('User', userSchema);

app.use(logger);
app.use(auth);

app.post('/api/users', async (req, res) => {
  try { const user = await User.create(req.body); res.json(user); }
  catch (err) { res.status(500).json({ message: err.message }); }
});

app.get('/api/users', async (req, res) => {
  try { const users = await User.find(); res.json(users); }
  catch (err) { res.status(500).json({ message: err.message }); }
});

app.put('/api/users/:id', async (req, res) => {
  try { const user = await User.findByIdAndUpdate(req.params.id, req.body, { new: true }); res.json(user); }
  catch (err) { res.status(500).json({ message: err.message }); }
});

app.delete('/api/users/:id', async (req, res) => {
  try { await User.findByIdAndDelete(req.params.id); res.json({ message: 'User deleted successfully' }); }
  catch (err) { res.status(500).json({ message: err.message }); }
});

mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log("MongoDB connected"))
  .catch(err => console.log(err));

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
